
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMMA COMPARISON CTECHAR CTEFLOAT CTEINT CTESTRING DECREMENT DIFFERENT DIVIDE DO ELSE EQUALS FLOAT FOR GREATERHANOREQUAL GREATERTHAN ID IF INCREMENT INT LEFTBRACKET LEFTPARENTHESIS LEFTSQRBRACKET LESSTHAN LESSTHANOREQUAL MAIN MINUS MOD MODULE MULTIPLY OR PLUS PLUSEQUALS PROGRAM READ RETURN RIGHTBRACKET RIGHTPARENTHESIS RIGHTSQRBRACKET SEMICOLON SUBSTRACTEQUALS THEN TO VAR VOID WHILE WRITE\n    program : PROGRAM ID SEMICOLON vars functions_list neupoint_back_global MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block\n            | PROGRAM ID SEMICOLON vars MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block\n            | PROGRAM ID SEMICOLON functions_list neupoint_back_global MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block\n            | PROGRAM ID SEMICOLON MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block\n    \n    data_type : INT\n              | FLOAT\n              | CHAR\n    \n    vars : VAR vars_lists neupoint_add_vars\n    \n    vars_lists : data_type decla_ids_list SEMICOLON vars_lists\n               | data_type decla_ids_list SEMICOLON\n    \n    decla_ids_list : decla_identifier COMMA decla_ids_list\n                   | decla_identifier\n    \n    decla_identifier : ID LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET\n                     | ID LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET\n                     | ID\n    \n    ids_list : identifier COMMA ids_list\n             | identifier\n    \n    identifier : ID LEFTSQRBRACKET expresion RIGHTSQRBRACKET LEFTSQRBRACKET expresion RIGHTSQRBRACKET\n               | ID LEFTSQRBRACKET expresion RIGHTSQRBRACKET\n               | ID\n    \n    neupoint_add_vars :\n    \n    return_type : data_type\n                | VOID\n    \n    functions_list : function functions_list\n                   | function\n    \n    function : MODULE return_type ID neupoint_add_function parameters_list vars block\n             | MODULE return_type ID neupoint_add_function parameters_list block\n    \n    parameters_list : LEFTPARENTHESIS parameter RIGHTPARENTHESIS neupoint_add_parameters\n                    | LEFTPARENTHESIS RIGHTPARENTHESIS\n    \n    parameter : data_type decla_identifier COMMA parameter\n              | data_type decla_identifier\n    \n    neupoint_add_function : \n    \n    neupoint_add_parameters :\n    \n    neupoint_back_global : \n    \n    comparators : COMPARISON\n                | GREATERHANOREQUAL\n                | LESSTHANOREQUAL\n                | GREATERTHAN\n                | LESSTHAN\n                | DIFFERENT\n    \n    exp_operator : PLUS\n                 | MINUS\n    \n    term_operator : MULTIPLY\n                  | DIVIDE\n                  | MOD\n    \n    block : LEFTBRACKET statutes_list RIGHTBRACKET\n          | LEFTBRACKET RIGHTBRACKET\n    \n    statutes_list : statute statutes_list\n                  | statute\n    \n    statute : assignment\n            | reading\n            | writing\n            | decision\n            | loop\n            | function_return\n            | function_call SEMICOLON\n    \n    assignment : identifier neupoint_add_operand EQUALS neupoint_add_operator expresion neupoint_assignment_quad SEMICOLON\n               | identifier neupoint_add_operand PLUSEQUALS neupoint_add_operator expresion neupoint_assignment_quad SEMICOLON\n               | identifier neupoint_add_operand SUBSTRACTEQUALS neupoint_add_operator expresion neupoint_assignment_quad SEMICOLON\n               | identifier neupoint_add_operand INCREMENT neupoint_add_operator neupoint_assignment_single_quad SEMICOLON\n               | identifier neupoint_add_operand DECREMENT neupoint_add_operator neupoint_assignment_single_quad SEMICOLON\n    \n    reading : READ LEFTPARENTHESIS ids_list RIGHTPARENTHESIS SEMICOLON\n    \n    writing : WRITE LEFTPARENTHESIS writing_list RIGHTPARENTHESIS SEMICOLON\n    \n    writing_list : CTESTRING COMMA writing_list\n                 | expresion COMMA writing_list\n                 | CTESTRING\n                 | expresion\n    \n    decision : IF LEFTPARENTHESIS expresion RIGHTPARENTHESIS neupoint_conditional_quad THEN block ELSE neupoint_else_conditional_quad block neupoint_end_conditional_quad\n             | IF LEFTPARENTHESIS expresion RIGHTPARENTHESIS neupoint_conditional_quad THEN block neupoint_end_conditional_quad\n    \n    loop : conditional\n         | non_conditional\n    \n    conditional : WHILE neupoint_while_start LEFTPARENTHESIS expresion RIGHTPARENTHESIS neupoint_conditional_quad DO block neupoint_while_end\n    \n    non_conditional : FOR ID EQUALS exp TO exp DO block\n    \n    function_return : RETURN LEFTPARENTHESIS exp RIGHTPARENTHESIS SEMICOLON\n    \n    function_call : ID LEFTPARENTHESIS expresion_list RIGHTPARENTHESIS\n    \n    expresion_list : expresion COMMA expresion_list\n                   | expresion\n    \n    expresion : exp_relational AND neupoint_add_operator expresion neupoint_logical_relational_opt\n              | exp_relational OR neupoint_add_operator expresion neupoint_logical_relational_opt\n              | exp_relational\n    \n    exp_relational : exp comparators neupoint_add_operator exp neupoint_logical_relational_opt\n                   | exp\n    \n    exp : term neupoint_arithmetic_exp_quad exp_operator neupoint_add_operator exp\n        | term neupoint_arithmetic_exp_quad\n    \n    term : factor neupoint_arithmetic_term_quad term_operator neupoint_add_operator term\n         | factor neupoint_arithmetic_term_quad\n    \n    factor : LEFTPARENTHESIS neupoint_add_wall expresion neupoint_remove_wall RIGHTPARENTHESIS\n           | CTEINT neupoint_add_cte_operand\n           | CTEFLOAT neupoint_add_cte_operand\n           | CTECHAR neupoint_add_cte_operand\n           | function_call\n           | identifier neupoint_add_operand\n    \n    neupoint_add_operator : \n    \n    neupoint_add_operand : \n    \n    neupoint_add_cte_operand : \n    \n    neupoint_arithmetic_exp_quad : \n    \n    neupoint_arithmetic_term_quad : \n    \n    neupoint_add_wall : \n    \n    neupoint_remove_wall : \n    \n    neupoint_assignment_quad : \n    \n    neupoint_assignment_single_quad : \n    \n    neupoint_logical_relational_opt : \n    \n    neupoint_conditional_quad : \n    \n    neupoint_else_conditional_quad : \n    \n    neupoint_end_conditional_quad : \n    \n    neupoint_while_start : \n    \n    neupoint_while_end : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,36,43,46,71,72,90,],[0,-4,-2,-47,-3,-46,-1,]),'ID':([2,16,17,18,19,21,22,23,37,39,46,47,48,49,50,51,52,53,59,60,64,72,74,76,77,78,79,80,81,89,91,92,93,99,117,118,123,124,125,129,130,132,133,134,135,136,137,138,139,140,141,142,152,164,167,170,171,172,173,174,175,176,177,178,179,181,183,185,191,192,197,198,203,204,205,212,217,218,219,221,222,223,],[3,31,-5,-6,-7,32,-22,-23,62,31,-47,62,-50,-51,-52,-53,-54,-55,-70,-71,83,-46,-56,98,62,62,62,62,62,31,-93,-93,-93,-98,62,62,62,62,62,98,62,62,62,-93,-93,-93,-35,-36,-37,-38,-39,-40,62,-62,-63,62,62,62,-93,-41,-42,-93,-43,-44,-45,-74,62,62,-60,-61,62,62,-57,-58,-59,-105,-69,-107,-73,-72,-105,-68,]),'SEMICOLON':([3,29,30,31,54,62,66,84,94,95,103,104,105,106,107,108,109,110,111,126,127,128,131,143,144,145,146,147,148,150,151,153,159,160,161,162,163,186,188,189,190,194,195,196,206,207,208,209,210,211,213,],[4,38,-12,-15,74,-20,-11,-14,-93,-93,-80,-82,-96,-97,-95,-95,-95,-91,-94,-101,-101,164,167,-84,-86,-88,-89,-90,-92,181,-75,-19,-100,-100,-100,191,192,-13,203,204,205,-102,-102,-102,-87,-78,-79,-81,-83,-85,-18,]),'MAIN':([4,5,6,9,11,13,15,20,24,28,38,46,65,72,86,120,],[7,12,-34,-25,-34,26,-21,-24,33,-8,-10,-47,-9,-46,-27,-26,]),'VAR':([4,68,88,121,157,],[8,8,-29,-33,-28,]),'MODULE':([4,5,9,15,28,38,46,65,72,86,120,],[10,10,10,-21,-8,-10,-47,-9,-46,-27,-26,]),'LEFTPARENTHESIS':([7,12,26,32,33,41,56,57,58,61,62,63,77,78,79,80,81,82,91,92,93,99,117,118,123,124,125,130,132,133,134,135,136,137,138,139,140,141,142,152,170,171,172,173,174,175,176,177,178,179,183,185,197,198,],[14,25,35,-32,42,69,76,77,78,79,80,-106,99,99,99,99,99,117,-93,-93,-93,-98,99,99,99,99,99,99,99,99,-93,-93,-93,-35,-36,-37,-38,-39,-40,99,99,99,99,-93,-41,-42,-93,-43,-44,-45,99,99,99,99,]),'INT':([8,10,38,69,158,],[17,17,17,17,17,]),'FLOAT':([8,10,38,69,158,],[18,18,18,18,18,]),'CHAR':([8,10,38,69,158,],[19,19,19,19,19,]),'VOID':([10,],[23,]),'RIGHTPARENTHESIS':([14,25,31,35,42,62,69,84,87,96,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,143,144,145,146,147,148,151,153,154,165,166,168,169,182,186,187,193,194,195,196,206,207,208,209,210,211,213,],[27,34,-15,44,70,-20,88,-14,121,128,-17,-20,131,-66,-67,-80,-82,-96,-97,-95,-95,-95,-91,-94,149,150,151,-77,-31,-84,-86,-88,-89,-90,-92,-75,-19,184,-16,-99,-64,-65,-76,-13,-30,206,-102,-102,-102,-87,-78,-79,-81,-83,-85,-18,]),'LEFTBRACKET':([15,27,28,34,38,44,65,68,70,85,88,121,157,199,214,215,216,220,],[-21,37,-8,37,-10,37,-9,37,37,37,-29,-33,-28,37,37,37,-104,37,]),'COMMA':([30,31,62,84,97,98,101,102,103,104,105,106,107,108,109,110,111,115,122,143,144,145,146,147,148,151,153,186,194,195,196,206,207,208,209,210,211,213,],[39,-15,-20,-14,129,-20,132,133,-80,-82,-96,-97,-95,-95,-95,-91,-94,152,158,-84,-86,-88,-89,-90,-92,-75,-19,-13,-102,-102,-102,-87,-78,-79,-81,-83,-85,-18,]),'LEFTSQRBRACKET':([31,62,84,98,153,],[40,81,119,81,183,]),'RIGHTBRACKET':([37,45,46,47,48,49,50,51,52,53,59,60,72,73,74,164,167,181,191,192,203,204,205,212,217,218,219,221,222,223,],[46,72,-47,-49,-50,-51,-52,-53,-54,-55,-70,-71,-46,-48,-56,-62,-63,-74,-60,-61,-57,-58,-59,-105,-69,-107,-73,-72,-105,-68,]),'READ':([37,46,47,48,49,50,51,52,53,59,60,72,74,164,167,181,191,192,203,204,205,212,217,218,219,221,222,223,],[56,-47,56,-50,-51,-52,-53,-54,-55,-70,-71,-46,-56,-62,-63,-74,-60,-61,-57,-58,-59,-105,-69,-107,-73,-72,-105,-68,]),'WRITE':([37,46,47,48,49,50,51,52,53,59,60,72,74,164,167,181,191,192,203,204,205,212,217,218,219,221,222,223,],[57,-47,57,-50,-51,-52,-53,-54,-55,-70,-71,-46,-56,-62,-63,-74,-60,-61,-57,-58,-59,-105,-69,-107,-73,-72,-105,-68,]),'IF':([37,46,47,48,49,50,51,52,53,59,60,72,74,164,167,181,191,192,203,204,205,212,217,218,219,221,222,223,],[58,-47,58,-50,-51,-52,-53,-54,-55,-70,-71,-46,-56,-62,-63,-74,-60,-61,-57,-58,-59,-105,-69,-107,-73,-72,-105,-68,]),'RETURN':([37,46,47,48,49,50,51,52,53,59,60,72,74,164,167,181,191,192,203,204,205,212,217,218,219,221,222,223,],[61,-47,61,-50,-51,-52,-53,-54,-55,-70,-71,-46,-56,-62,-63,-74,-60,-61,-57,-58,-59,-105,-69,-107,-73,-72,-105,-68,]),'WHILE':([37,46,47,48,49,50,51,52,53,59,60,72,74,164,167,181,191,192,203,204,205,212,217,218,219,221,222,223,],[63,-47,63,-50,-51,-52,-53,-54,-55,-70,-71,-46,-56,-62,-63,-74,-60,-61,-57,-58,-59,-105,-69,-107,-73,-72,-105,-68,]),'FOR':([37,46,47,48,49,50,51,52,53,59,60,72,74,164,167,181,191,192,203,204,205,212,217,218,219,221,222,223,],[64,-47,64,-50,-51,-52,-53,-54,-55,-70,-71,-46,-56,-62,-63,-74,-60,-61,-57,-58,-59,-105,-69,-107,-73,-72,-105,-68,]),'CTEINT':([40,77,78,79,80,81,91,92,93,99,117,118,119,123,124,125,130,132,133,134,135,136,137,138,139,140,141,142,152,170,171,172,173,174,175,176,177,178,179,183,185,197,198,],[67,107,107,107,107,107,-93,-93,-93,-98,107,107,156,107,107,107,107,107,107,-93,-93,-93,-35,-36,-37,-38,-39,-40,107,107,107,107,-93,-41,-42,-93,-43,-44,-45,107,107,107,107,]),'ELSE':([46,72,212,],[-47,-46,216,]),'EQUALS':([55,62,75,83,153,213,],[-94,-20,91,118,-19,-18,]),'PLUSEQUALS':([55,62,75,153,213,],[-94,-20,92,-19,-18,]),'SUBSTRACTEQUALS':([55,62,75,153,213,],[-94,-20,93,-19,-18,]),'INCREMENT':([55,62,75,153,213,],[-94,-20,94,-19,-18,]),'DECREMENT':([55,62,75,153,213,],[-94,-20,95,-19,-18,]),'MULTIPLY':([62,106,107,108,109,110,111,144,145,146,147,148,151,153,206,213,],[-20,-97,-95,-95,-95,-91,-94,177,-88,-89,-90,-92,-75,-19,-87,-18,]),'DIVIDE':([62,106,107,108,109,110,111,144,145,146,147,148,151,153,206,213,],[-20,-97,-95,-95,-95,-91,-94,178,-88,-89,-90,-92,-75,-19,-87,-18,]),'MOD':([62,106,107,108,109,110,111,144,145,146,147,148,151,153,206,213,],[-20,-97,-95,-95,-95,-91,-94,179,-88,-89,-90,-92,-75,-19,-87,-18,]),'PLUS':([62,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,206,211,213,],[-20,-96,-97,-95,-95,-95,-91,-94,174,-86,-88,-89,-90,-92,-75,-19,-87,-85,-18,]),'MINUS':([62,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,206,211,213,],[-20,-96,-97,-95,-95,-95,-91,-94,175,-86,-88,-89,-90,-92,-75,-19,-87,-85,-18,]),'COMPARISON':([62,104,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,206,210,211,213,],[-20,137,-96,-97,-95,-95,-95,-91,-94,-84,-86,-88,-89,-90,-92,-75,-19,-87,-83,-85,-18,]),'GREATERHANOREQUAL':([62,104,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,206,210,211,213,],[-20,138,-96,-97,-95,-95,-95,-91,-94,-84,-86,-88,-89,-90,-92,-75,-19,-87,-83,-85,-18,]),'LESSTHANOREQUAL':([62,104,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,206,210,211,213,],[-20,139,-96,-97,-95,-95,-95,-91,-94,-84,-86,-88,-89,-90,-92,-75,-19,-87,-83,-85,-18,]),'GREATERTHAN':([62,104,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,206,210,211,213,],[-20,140,-96,-97,-95,-95,-95,-91,-94,-84,-86,-88,-89,-90,-92,-75,-19,-87,-83,-85,-18,]),'LESSTHAN':([62,104,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,206,210,211,213,],[-20,141,-96,-97,-95,-95,-95,-91,-94,-84,-86,-88,-89,-90,-92,-75,-19,-87,-83,-85,-18,]),'DIFFERENT':([62,104,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,206,210,211,213,],[-20,142,-96,-97,-95,-95,-95,-91,-94,-84,-86,-88,-89,-90,-92,-75,-19,-87,-83,-85,-18,]),'AND':([62,103,104,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,196,206,209,210,211,213,],[-20,134,-82,-96,-97,-95,-95,-95,-91,-94,-84,-86,-88,-89,-90,-92,-75,-19,-102,-87,-81,-83,-85,-18,]),'OR':([62,103,104,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,196,206,209,210,211,213,],[-20,135,-82,-96,-97,-95,-95,-95,-91,-94,-84,-86,-88,-89,-90,-92,-75,-19,-102,-87,-81,-83,-85,-18,]),'RIGHTSQRBRACKET':([62,67,103,104,105,106,107,108,109,110,111,116,143,144,145,146,147,148,151,153,156,194,195,196,200,206,207,208,209,210,211,213,],[-20,84,-80,-82,-96,-97,-95,-95,-95,-91,-94,153,-84,-86,-88,-89,-90,-92,-75,-19,186,-102,-102,-102,213,-87,-78,-79,-81,-83,-85,-18,]),'TO':([62,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,155,206,210,211,213,],[-20,-96,-97,-95,-95,-95,-91,-94,-84,-86,-88,-89,-90,-92,-75,-19,185,-87,-83,-85,-18,]),'DO':([62,105,106,107,108,109,110,111,143,144,145,146,147,148,151,153,184,201,202,206,210,211,213,],[-20,-96,-97,-95,-95,-95,-91,-94,-84,-86,-88,-89,-90,-92,-75,-19,-103,214,215,-87,-83,-85,-18,]),'CTESTRING':([77,132,133,],[101,101,101,]),'CTEFLOAT':([77,78,79,80,81,91,92,93,99,117,118,123,124,125,130,132,133,134,135,136,137,138,139,140,141,142,152,170,171,172,173,174,175,176,177,178,179,183,185,197,198,],[108,108,108,108,108,-93,-93,-93,-98,108,108,108,108,108,108,108,108,-93,-93,-93,-35,-36,-37,-38,-39,-40,108,108,108,108,-93,-41,-42,-93,-43,-44,-45,108,108,108,108,]),'CTECHAR':([77,78,79,80,81,91,92,93,99,117,118,123,124,125,130,132,133,134,135,136,137,138,139,140,141,142,152,170,171,172,173,174,175,176,177,178,179,183,185,197,198,],[109,109,109,109,109,-93,-93,-93,-98,109,109,109,109,109,109,109,109,-93,-93,-93,-35,-36,-37,-38,-39,-40,109,109,109,109,-93,-41,-42,-93,-43,-44,-45,109,109,109,109,]),'THEN':([149,180,],[-103,199,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,68,],[5,85,]),'functions_list':([4,5,9,],[6,11,20,]),'function':([4,5,9,],[9,9,9,]),'neupoint_back_global':([6,11,],[13,24,]),'vars_lists':([8,38,],[15,65,]),'data_type':([8,10,38,69,158,],[16,22,16,89,89,]),'return_type':([10,],[21,]),'neupoint_add_vars':([15,],[28,]),'decla_ids_list':([16,39,],[29,66,]),'decla_identifier':([16,39,89,],[30,30,122,]),'block':([27,34,44,68,70,85,199,214,215,220,],[36,43,71,86,90,120,212,218,219,222,]),'neupoint_add_function':([32,],[41,]),'statutes_list':([37,47,],[45,73,]),'statute':([37,47,],[47,47,]),'assignment':([37,47,],[48,48,]),'reading':([37,47,],[49,49,]),'writing':([37,47,],[50,50,]),'decision':([37,47,],[51,51,]),'loop':([37,47,],[52,52,]),'function_return':([37,47,],[53,53,]),'function_call':([37,47,77,78,79,80,81,117,118,123,124,125,130,132,133,152,170,171,172,183,185,197,198,],[54,54,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'identifier':([37,47,76,77,78,79,80,81,117,118,123,124,125,129,130,132,133,152,170,171,172,183,185,197,198,],[55,55,97,111,111,111,111,111,111,111,111,111,111,97,111,111,111,111,111,111,111,111,111,111,111,]),'conditional':([37,47,],[59,59,]),'non_conditional':([37,47,],[60,60,]),'parameters_list':([41,],[68,]),'neupoint_add_operand':([55,111,],[75,148,]),'neupoint_while_start':([63,],[82,]),'parameter':([69,158,],[87,187,]),'ids_list':([76,129,],[96,165,]),'writing_list':([77,132,133,],[100,168,169,]),'expresion':([77,78,80,81,117,123,124,125,130,132,133,152,170,171,183,],[102,112,115,116,154,159,160,161,166,102,102,115,194,195,200,]),'exp_relational':([77,78,80,81,117,123,124,125,130,132,133,152,170,171,183,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'exp':([77,78,79,80,81,117,118,123,124,125,130,132,133,152,170,171,172,183,185,197,],[104,104,113,104,104,104,155,104,104,104,104,104,104,104,104,104,196,104,202,210,]),'term':([77,78,79,80,81,117,118,123,124,125,130,132,133,152,170,171,172,183,185,197,198,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,211,]),'factor':([77,78,79,80,81,117,118,123,124,125,130,132,133,152,170,171,172,183,185,197,198,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'expresion_list':([80,152,],[114,182,]),'neupoint_add_operator':([91,92,93,94,95,134,135,136,173,176,],[123,124,125,126,127,170,171,172,197,198,]),'neupoint_add_wall':([99,],[130,]),'comparators':([104,],[136,]),'neupoint_arithmetic_exp_quad':([105,],[143,]),'neupoint_arithmetic_term_quad':([106,],[144,]),'neupoint_add_cte_operand':([107,108,109,],[145,146,147,]),'neupoint_add_parameters':([121,],[157,]),'neupoint_assignment_single_quad':([126,127,],[162,163,]),'exp_operator':([143,],[173,]),'term_operator':([144,],[176,]),'neupoint_conditional_quad':([149,184,],[180,201,]),'neupoint_assignment_quad':([159,160,161,],[188,189,190,]),'neupoint_remove_wall':([166,],[193,]),'neupoint_logical_relational_opt':([194,195,196,],[207,208,209,]),'neupoint_end_conditional_quad':([212,222,],[217,223,]),'neupoint_else_conditional_quad':([216,],[220,]),'neupoint_while_end':([218,],[221,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON vars functions_list neupoint_back_global MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block','program',10,'p_program','tokensAndGrammars.py',168),
  ('program -> PROGRAM ID SEMICOLON vars MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block','program',8,'p_program','tokensAndGrammars.py',169),
  ('program -> PROGRAM ID SEMICOLON functions_list neupoint_back_global MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block','program',9,'p_program','tokensAndGrammars.py',170),
  ('program -> PROGRAM ID SEMICOLON MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block','program',7,'p_program','tokensAndGrammars.py',171),
  ('data_type -> INT','data_type',1,'p_data_type','tokensAndGrammars.py',178),
  ('data_type -> FLOAT','data_type',1,'p_data_type','tokensAndGrammars.py',179),
  ('data_type -> CHAR','data_type',1,'p_data_type','tokensAndGrammars.py',180),
  ('vars -> VAR vars_lists neupoint_add_vars','vars',3,'p_vars','tokensAndGrammars.py',187),
  ('vars_lists -> data_type decla_ids_list SEMICOLON vars_lists','vars_lists',4,'p_vars_lists','tokensAndGrammars.py',194),
  ('vars_lists -> data_type decla_ids_list SEMICOLON','vars_lists',3,'p_vars_lists','tokensAndGrammars.py',195),
  ('decla_ids_list -> decla_identifier COMMA decla_ids_list','decla_ids_list',3,'p_decla_ids_list','tokensAndGrammars.py',209),
  ('decla_ids_list -> decla_identifier','decla_ids_list',1,'p_decla_ids_list','tokensAndGrammars.py',210),
  ('decla_identifier -> ID LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET','decla_identifier',7,'p_decla_identifier','tokensAndGrammars.py',221),
  ('decla_identifier -> ID LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET','decla_identifier',4,'p_decla_identifier','tokensAndGrammars.py',222),
  ('decla_identifier -> ID','decla_identifier',1,'p_decla_identifier','tokensAndGrammars.py',223),
  ('ids_list -> identifier COMMA ids_list','ids_list',3,'p_ids_list','tokensAndGrammars.py',236),
  ('ids_list -> identifier','ids_list',1,'p_ids_list','tokensAndGrammars.py',237),
  ('identifier -> ID LEFTSQRBRACKET expresion RIGHTSQRBRACKET LEFTSQRBRACKET expresion RIGHTSQRBRACKET','identifier',7,'p_identifier','tokensAndGrammars.py',244),
  ('identifier -> ID LEFTSQRBRACKET expresion RIGHTSQRBRACKET','identifier',4,'p_identifier','tokensAndGrammars.py',245),
  ('identifier -> ID','identifier',1,'p_identifier','tokensAndGrammars.py',246),
  ('neupoint_add_vars -> <empty>','neupoint_add_vars',0,'p_neupoint_add_vars','tokensAndGrammars.py',254),
  ('return_type -> data_type','return_type',1,'p_return_type','tokensAndGrammars.py',262),
  ('return_type -> VOID','return_type',1,'p_return_type','tokensAndGrammars.py',263),
  ('functions_list -> function functions_list','functions_list',2,'p_functions_list','tokensAndGrammars.py',270),
  ('functions_list -> function','functions_list',1,'p_functions_list','tokensAndGrammars.py',271),
  ('function -> MODULE return_type ID neupoint_add_function parameters_list vars block','function',7,'p_function','tokensAndGrammars.py',278),
  ('function -> MODULE return_type ID neupoint_add_function parameters_list block','function',6,'p_function','tokensAndGrammars.py',279),
  ('parameters_list -> LEFTPARENTHESIS parameter RIGHTPARENTHESIS neupoint_add_parameters','parameters_list',4,'p_parameters_list','tokensAndGrammars.py',298),
  ('parameters_list -> LEFTPARENTHESIS RIGHTPARENTHESIS','parameters_list',2,'p_parameters_list','tokensAndGrammars.py',299),
  ('parameter -> data_type decla_identifier COMMA parameter','parameter',4,'p_parameter','tokensAndGrammars.py',306),
  ('parameter -> data_type decla_identifier','parameter',2,'p_parameter','tokensAndGrammars.py',307),
  ('neupoint_add_function -> <empty>','neupoint_add_function',0,'p_neupoint_add_function','tokensAndGrammars.py',332),
  ('neupoint_add_parameters -> <empty>','neupoint_add_parameters',0,'p_neupoint_add_parameters','tokensAndGrammars.py',341),
  ('neupoint_back_global -> <empty>','neupoint_back_global',0,'p_neupoint_back_global','tokensAndGrammars.py',348),
  ('comparators -> COMPARISON','comparators',1,'p_comparators','tokensAndGrammars.py',356),
  ('comparators -> GREATERHANOREQUAL','comparators',1,'p_comparators','tokensAndGrammars.py',357),
  ('comparators -> LESSTHANOREQUAL','comparators',1,'p_comparators','tokensAndGrammars.py',358),
  ('comparators -> GREATERTHAN','comparators',1,'p_comparators','tokensAndGrammars.py',359),
  ('comparators -> LESSTHAN','comparators',1,'p_comparators','tokensAndGrammars.py',360),
  ('comparators -> DIFFERENT','comparators',1,'p_comparators','tokensAndGrammars.py',361),
  ('exp_operator -> PLUS','exp_operator',1,'p_exp_operator','tokensAndGrammars.py',368),
  ('exp_operator -> MINUS','exp_operator',1,'p_exp_operator','tokensAndGrammars.py',369),
  ('term_operator -> MULTIPLY','term_operator',1,'p_term_operator','tokensAndGrammars.py',376),
  ('term_operator -> DIVIDE','term_operator',1,'p_term_operator','tokensAndGrammars.py',377),
  ('term_operator -> MOD','term_operator',1,'p_term_operator','tokensAndGrammars.py',378),
  ('block -> LEFTBRACKET statutes_list RIGHTBRACKET','block',3,'p_block','tokensAndGrammars.py',386),
  ('block -> LEFTBRACKET RIGHTBRACKET','block',2,'p_block','tokensAndGrammars.py',387),
  ('statutes_list -> statute statutes_list','statutes_list',2,'p_statutes_list','tokensAndGrammars.py',394),
  ('statutes_list -> statute','statutes_list',1,'p_statutes_list','tokensAndGrammars.py',395),
  ('statute -> assignment','statute',1,'p_statute','tokensAndGrammars.py',402),
  ('statute -> reading','statute',1,'p_statute','tokensAndGrammars.py',403),
  ('statute -> writing','statute',1,'p_statute','tokensAndGrammars.py',404),
  ('statute -> decision','statute',1,'p_statute','tokensAndGrammars.py',405),
  ('statute -> loop','statute',1,'p_statute','tokensAndGrammars.py',406),
  ('statute -> function_return','statute',1,'p_statute','tokensAndGrammars.py',407),
  ('statute -> function_call SEMICOLON','statute',2,'p_statute','tokensAndGrammars.py',408),
  ('assignment -> identifier neupoint_add_operand EQUALS neupoint_add_operator expresion neupoint_assignment_quad SEMICOLON','assignment',7,'p_assignment','tokensAndGrammars.py',420),
  ('assignment -> identifier neupoint_add_operand PLUSEQUALS neupoint_add_operator expresion neupoint_assignment_quad SEMICOLON','assignment',7,'p_assignment','tokensAndGrammars.py',421),
  ('assignment -> identifier neupoint_add_operand SUBSTRACTEQUALS neupoint_add_operator expresion neupoint_assignment_quad SEMICOLON','assignment',7,'p_assignment','tokensAndGrammars.py',422),
  ('assignment -> identifier neupoint_add_operand INCREMENT neupoint_add_operator neupoint_assignment_single_quad SEMICOLON','assignment',6,'p_assignment','tokensAndGrammars.py',423),
  ('assignment -> identifier neupoint_add_operand DECREMENT neupoint_add_operator neupoint_assignment_single_quad SEMICOLON','assignment',6,'p_assignment','tokensAndGrammars.py',424),
  ('reading -> READ LEFTPARENTHESIS ids_list RIGHTPARENTHESIS SEMICOLON','reading',5,'p_reading','tokensAndGrammars.py',431),
  ('writing -> WRITE LEFTPARENTHESIS writing_list RIGHTPARENTHESIS SEMICOLON','writing',5,'p_writing','tokensAndGrammars.py',438),
  ('writing_list -> CTESTRING COMMA writing_list','writing_list',3,'p_writing_list','tokensAndGrammars.py',445),
  ('writing_list -> expresion COMMA writing_list','writing_list',3,'p_writing_list','tokensAndGrammars.py',446),
  ('writing_list -> CTESTRING','writing_list',1,'p_writing_list','tokensAndGrammars.py',447),
  ('writing_list -> expresion','writing_list',1,'p_writing_list','tokensAndGrammars.py',448),
  ('decision -> IF LEFTPARENTHESIS expresion RIGHTPARENTHESIS neupoint_conditional_quad THEN block ELSE neupoint_else_conditional_quad block neupoint_end_conditional_quad','decision',11,'p_decision','tokensAndGrammars.py',455),
  ('decision -> IF LEFTPARENTHESIS expresion RIGHTPARENTHESIS neupoint_conditional_quad THEN block neupoint_end_conditional_quad','decision',8,'p_decision','tokensAndGrammars.py',456),
  ('loop -> conditional','loop',1,'p_loop','tokensAndGrammars.py',463),
  ('loop -> non_conditional','loop',1,'p_loop','tokensAndGrammars.py',464),
  ('conditional -> WHILE neupoint_while_start LEFTPARENTHESIS expresion RIGHTPARENTHESIS neupoint_conditional_quad DO block neupoint_while_end','conditional',9,'p_conditional','tokensAndGrammars.py',471),
  ('non_conditional -> FOR ID EQUALS exp TO exp DO block','non_conditional',8,'p_non_conditional','tokensAndGrammars.py',478),
  ('function_return -> RETURN LEFTPARENTHESIS exp RIGHTPARENTHESIS SEMICOLON','function_return',5,'p_function_return','tokensAndGrammars.py',485),
  ('function_call -> ID LEFTPARENTHESIS expresion_list RIGHTPARENTHESIS','function_call',4,'p_function_call','tokensAndGrammars.py',493),
  ('expresion_list -> expresion COMMA expresion_list','expresion_list',3,'p_expresion_list','tokensAndGrammars.py',500),
  ('expresion_list -> expresion','expresion_list',1,'p_expresion_list','tokensAndGrammars.py',501),
  ('expresion -> exp_relational AND neupoint_add_operator expresion neupoint_logical_relational_opt','expresion',5,'p_expresion','tokensAndGrammars.py',508),
  ('expresion -> exp_relational OR neupoint_add_operator expresion neupoint_logical_relational_opt','expresion',5,'p_expresion','tokensAndGrammars.py',509),
  ('expresion -> exp_relational','expresion',1,'p_expresion','tokensAndGrammars.py',510),
  ('exp_relational -> exp comparators neupoint_add_operator exp neupoint_logical_relational_opt','exp_relational',5,'p_exp_relational','tokensAndGrammars.py',517),
  ('exp_relational -> exp','exp_relational',1,'p_exp_relational','tokensAndGrammars.py',518),
  ('exp -> term neupoint_arithmetic_exp_quad exp_operator neupoint_add_operator exp','exp',5,'p_exp','tokensAndGrammars.py',525),
  ('exp -> term neupoint_arithmetic_exp_quad','exp',2,'p_exp','tokensAndGrammars.py',526),
  ('term -> factor neupoint_arithmetic_term_quad term_operator neupoint_add_operator term','term',5,'p_term','tokensAndGrammars.py',533),
  ('term -> factor neupoint_arithmetic_term_quad','term',2,'p_term','tokensAndGrammars.py',534),
  ('factor -> LEFTPARENTHESIS neupoint_add_wall expresion neupoint_remove_wall RIGHTPARENTHESIS','factor',5,'p_factor','tokensAndGrammars.py',541),
  ('factor -> CTEINT neupoint_add_cte_operand','factor',2,'p_factor','tokensAndGrammars.py',542),
  ('factor -> CTEFLOAT neupoint_add_cte_operand','factor',2,'p_factor','tokensAndGrammars.py',543),
  ('factor -> CTECHAR neupoint_add_cte_operand','factor',2,'p_factor','tokensAndGrammars.py',544),
  ('factor -> function_call','factor',1,'p_factor','tokensAndGrammars.py',545),
  ('factor -> identifier neupoint_add_operand','factor',2,'p_factor','tokensAndGrammars.py',546),
  ('neupoint_add_operator -> <empty>','neupoint_add_operator',0,'p_neupoint_add_operator','tokensAndGrammars.py',553),
  ('neupoint_add_operand -> <empty>','neupoint_add_operand',0,'p_neupoint_add_operand','tokensAndGrammars.py',560),
  ('neupoint_add_cte_operand -> <empty>','neupoint_add_cte_operand',0,'p_neupoint_add_cte_operand','tokensAndGrammars.py',573),
  ('neupoint_arithmetic_exp_quad -> <empty>','neupoint_arithmetic_exp_quad',0,'p_neupoint_arithmetic_exp_quad','tokensAndGrammars.py',587),
  ('neupoint_arithmetic_term_quad -> <empty>','neupoint_arithmetic_term_quad',0,'p_neupoint_arithmetic_term_quad','tokensAndGrammars.py',596),
  ('neupoint_add_wall -> <empty>','neupoint_add_wall',0,'p_neupoint_add_wall','tokensAndGrammars.py',605),
  ('neupoint_remove_wall -> <empty>','neupoint_remove_wall',0,'p_neupoint_remove_wall','tokensAndGrammars.py',612),
  ('neupoint_assignment_quad -> <empty>','neupoint_assignment_quad',0,'p_neupoint_assignment_quad','tokensAndGrammars.py',621),
  ('neupoint_assignment_single_quad -> <empty>','neupoint_assignment_single_quad',0,'p_neupoint_assignment_single_quad','tokensAndGrammars.py',628),
  ('neupoint_logical_relational_opt -> <empty>','neupoint_logical_relational_opt',0,'p_neupoint_logical_relational_opt','tokensAndGrammars.py',635),
  ('neupoint_conditional_quad -> <empty>','neupoint_conditional_quad',0,'p_neupoint_conditional_quad','tokensAndGrammars.py',642),
  ('neupoint_else_conditional_quad -> <empty>','neupoint_else_conditional_quad',0,'p_neupoint_else_conditional_quad','tokensAndGrammars.py',649),
  ('neupoint_end_conditional_quad -> <empty>','neupoint_end_conditional_quad',0,'p_neupoint_end_conditional_quad','tokensAndGrammars.py',656),
  ('neupoint_while_start -> <empty>','neupoint_while_start',0,'p_neupoint_while_start','tokensAndGrammars.py',663),
  ('neupoint_while_end -> <empty>','neupoint_while_end',0,'p_neupoint_while_end','tokensAndGrammars.py',670),
]
