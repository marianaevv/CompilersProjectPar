
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMMA COMPARISON CTECHAR CTEFLOAT CTEINT CTESTRING DECREMENT DIFFERENT DIVIDE DO ELSE EQUALS FLOAT FOR GREATERHANOREQUAL GREATERTHAN ID IF INCREMENT INT LEFTBRACKET LEFTPARENTHESIS LEFTSQRBRACKET LESSTHAN LESSTHANOREQUAL MAIN MINUS MOD MODULE MULTIPLY OR PLUS PLUSEQUALS PROGRAM READ RETURN RIGHTBRACKET RIGHTPARENTHESIS RIGHTSQRBRACKET SEMICOLON SUBSTRACTEQUALS THEN TO VAR VOID WHILE WRITE\n    program : PROGRAM ID SEMICOLON vars functions_list neupoint_back_global MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block\n            | PROGRAM ID SEMICOLON vars MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block\n            | PROGRAM ID SEMICOLON functions_list neupoint_back_global MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block\n            | PROGRAM ID SEMICOLON MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block\n    \n    data_type : INT\n              | FLOAT\n              | CHAR\n    \n    vars : VAR vars_lists neupoint_add_vars\n    \n    vars_lists : data_type decla_ids_list SEMICOLON vars_lists\n               | data_type decla_ids_list SEMICOLON\n    \n    decla_ids_list : decla_identifier COMMA decla_ids_list\n                   | decla_identifier\n    \n    decla_identifier : ID LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET\n                     | ID LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET\n                     | ID\n    \n    ids_list : identifier COMMA ids_list\n             | identifier\n    \n    identifier : ID LEFTSQRBRACKET expresion RIGHTSQRBRACKET LEFTSQRBRACKET expresion RIGHTSQRBRACKET\n               | ID LEFTSQRBRACKET expresion RIGHTSQRBRACKET\n               | ID\n    \n    neupoint_add_vars :\n    \n    return_type : data_type\n                | VOID\n    \n    functions_list : function functions_list\n                   | function\n    \n    function : MODULE return_type ID neupoint_add_function parameters_list vars block\n             | MODULE return_type ID neupoint_add_function parameters_list block\n    \n    parameters_list : LEFTPARENTHESIS parameter RIGHTPARENTHESIS neupoint_add_parameters\n                    | LEFTPARENTHESIS RIGHTPARENTHESIS\n    \n    parameter : data_type decla_identifier COMMA parameter\n              | data_type decla_identifier\n    \n    neupoint_add_function : \n    \n    neupoint_add_parameters :\n    \n    neupoint_back_global : \n    \n    comparators : COMPARISON\n                | GREATERHANOREQUAL\n                | LESSTHANOREQUAL\n                | GREATERTHAN\n                | LESSTHAN\n                | DIFFERENT\n                | OR\n                | AND\n    \n    exp_operator : PLUS\n                 | MINUS\n    \n    term_operator : MULTIPLY\n                  | DIVIDE\n                  | MOD\n    \n    block : LEFTBRACKET statutes_list RIGHTBRACKET\n          | LEFTBRACKET RIGHTBRACKET\n    \n    statutes_list : statute statutes_list\n                  | statute\n    \n    statute : asignation\n            | reading\n            | writing\n            | decision\n            | loop\n            | function_return\n            | function_call SEMICOLON\n    \n    asignation : identifier EQUALS expresion SEMICOLON\n               | identifier PLUSEQUALS expresion SEMICOLON\n               | identifier SUBSTRACTEQUALS expresion SEMICOLON\n               | identifier INCREMENT SEMICOLON\n               | identifier DECREMENT SEMICOLON\n    \n    reading : READ LEFTPARENTHESIS ids_list RIGHTPARENTHESIS SEMICOLON\n    \n    writing : WRITE LEFTPARENTHESIS writing_list RIGHTPARENTHESIS SEMICOLON\n    \n    writing_list : CTESTRING COMMA writing_list\n                 | expresion COMMA writing_list\n                 | CTESTRING\n                 | expresion\n    \n    decision : IF LEFTPARENTHESIS expresion RIGHTPARENTHESIS THEN block ELSE block\n             | IF LEFTPARENTHESIS expresion RIGHTPARENTHESIS THEN block\n    \n    loop : conditional block\n         | non_conditional block\n    \n    conditional : WHILE LEFTPARENTHESIS expresion RIGHTPARENTHESIS DO\n    \n    non_conditional : FOR ID EQUALS exp TO exp DO\n    \n    function_return : RETURN LEFTPARENTHESIS exp RIGHTPARENTHESIS SEMICOLON\n    \n    function_call : ID LEFTPARENTHESIS expresion_list RIGHTPARENTHESIS\n    \n    expresion_list : expresion COMMA expresion_list\n                   | expresion\n    \n    expresion : exp comparators neupoint_add_operator exp\n              | exp\n    \n    exp : term exp_operator neupoint_add_operator exp\n        | term\n    \n    term : factor term_operator neupoint_add_operator term\n         | factor\n    \n    factor : LEFTPARENTHESIS expresion RIGHTPARENTHESIS\n           | CTEINT neupoint_add_cte_operand\n           | CTEFLOAT neupoint_add_cte_operand\n           | CTECHAR neupoint_add_cte_operand\n           | function_call\n           | identifier neupoint_add_operand\n    \n    neupoint_add_operator : \n    \n    neupoint_add_operand : \n    \n    neupoint_add_cte_operand : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,36,43,46,71,72,96,],[0,-4,-2,-49,-3,-48,-1,]),'ID':([2,16,17,18,19,21,22,23,37,39,46,47,48,49,50,51,52,53,64,72,74,75,76,77,80,81,82,83,84,85,86,87,88,95,102,109,110,123,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,150,151,153,155,156,160,167,168,169,171,173,177,179,181,187,193,],[3,31,-5,-6,-7,32,-22,-23,62,31,-49,62,-52,-53,-54,-55,-56,-57,89,-48,-58,62,62,62,113,62,62,-72,-73,62,62,62,62,31,62,-62,-63,62,-59,-92,-35,-36,-37,-38,-39,-40,-41,-42,-92,-43,-44,-92,-45,-46,-47,-60,-61,113,62,62,62,62,62,62,-64,-65,-76,62,62,-71,-70,]),'SEMICOLON':([3,29,30,31,54,62,66,78,79,90,97,98,99,100,101,103,104,105,106,107,108,128,147,148,149,152,154,158,159,161,170,182,184,185,186,191,],[4,38,-12,-15,74,-20,-11,109,110,-14,-93,129,-81,-83,-85,-94,-94,-94,-90,150,151,-91,-87,-88,-89,171,173,177,-77,-19,-86,-13,-80,-82,-84,-18,]),'MAIN':([4,5,6,9,11,13,15,20,24,28,38,46,65,72,92,125,],[7,12,-34,-25,-34,26,-21,-24,33,-8,-10,-49,-9,-48,-27,-26,]),'VAR':([4,68,94,126,165,],[8,8,-29,-33,-28,]),'MODULE':([4,5,9,15,28,38,46,65,72,92,125,],[10,10,10,-21,-8,-10,-49,-9,-48,-27,-26,]),'LEFTPARENTHESIS':([7,12,26,32,33,41,56,57,58,61,62,63,75,76,77,81,82,85,86,87,88,102,123,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,155,156,160,167,168,169,179,181,],[14,25,35,-32,42,69,80,81,82,85,86,88,102,102,102,102,102,102,102,102,102,102,102,-92,-35,-36,-37,-38,-39,-40,-41,-42,-92,-43,-44,-92,-45,-46,-47,102,102,102,102,102,102,102,102,]),'INT':([8,10,38,69,166,],[17,17,17,17,17,]),'FLOAT':([8,10,38,69,166,],[18,18,18,18,18,]),'CHAR':([8,10,38,69,166,],[19,19,19,19,19,]),'VOID':([10,],[23,]),'RIGHTPARENTHESIS':([14,25,31,35,42,62,69,90,93,97,99,100,101,103,104,105,106,111,112,113,114,115,116,117,118,119,120,122,127,128,146,147,148,149,159,161,170,172,174,175,178,182,183,184,185,186,191,],[27,34,-15,44,70,-20,94,-14,126,-93,-81,-83,-85,-94,-94,-94,-90,152,-17,-20,154,-68,-69,157,158,159,-79,162,-31,-91,170,-87,-88,-89,-77,-19,-86,-16,-66,-67,-78,-13,-30,-80,-82,-84,-18,]),'LEFTBRACKET':([15,27,28,34,38,44,59,60,65,68,70,91,94,126,165,176,180,190,192,],[-21,37,-8,37,-10,37,37,37,-9,37,37,37,-29,-33,-28,37,-74,37,-75,]),'COMMA':([30,31,62,90,97,99,100,101,103,104,105,106,112,113,115,116,120,127,128,147,148,149,159,161,170,182,184,185,186,191,],[39,-15,-20,-14,-93,-81,-83,-85,-94,-94,-94,-90,153,-20,155,156,160,166,-91,-87,-88,-89,-77,-19,-86,-13,-80,-82,-84,-18,]),'LEFTSQRBRACKET':([31,62,90,113,161,],[40,87,124,87,179,]),'RIGHTBRACKET':([37,45,46,47,48,49,50,51,52,53,72,73,74,83,84,109,110,129,150,151,171,173,177,187,193,],[46,72,-49,-51,-52,-53,-54,-55,-56,-57,-48,-50,-58,-72,-73,-62,-63,-59,-60,-61,-64,-65,-76,-71,-70,]),'READ':([37,46,47,48,49,50,51,52,53,72,74,83,84,109,110,129,150,151,171,173,177,187,193,],[56,-49,56,-52,-53,-54,-55,-56,-57,-48,-58,-72,-73,-62,-63,-59,-60,-61,-64,-65,-76,-71,-70,]),'WRITE':([37,46,47,48,49,50,51,52,53,72,74,83,84,109,110,129,150,151,171,173,177,187,193,],[57,-49,57,-52,-53,-54,-55,-56,-57,-48,-58,-72,-73,-62,-63,-59,-60,-61,-64,-65,-76,-71,-70,]),'IF':([37,46,47,48,49,50,51,52,53,72,74,83,84,109,110,129,150,151,171,173,177,187,193,],[58,-49,58,-52,-53,-54,-55,-56,-57,-48,-58,-72,-73,-62,-63,-59,-60,-61,-64,-65,-76,-71,-70,]),'RETURN':([37,46,47,48,49,50,51,52,53,72,74,83,84,109,110,129,150,151,171,173,177,187,193,],[61,-49,61,-52,-53,-54,-55,-56,-57,-48,-58,-72,-73,-62,-63,-59,-60,-61,-64,-65,-76,-71,-70,]),'WHILE':([37,46,47,48,49,50,51,52,53,72,74,83,84,109,110,129,150,151,171,173,177,187,193,],[63,-49,63,-52,-53,-54,-55,-56,-57,-48,-58,-72,-73,-62,-63,-59,-60,-61,-64,-65,-76,-71,-70,]),'FOR':([37,46,47,48,49,50,51,52,53,72,74,83,84,109,110,129,150,151,171,173,177,187,193,],[64,-49,64,-52,-53,-54,-55,-56,-57,-48,-58,-72,-73,-62,-63,-59,-60,-61,-64,-65,-76,-71,-70,]),'CTEINT':([40,75,76,77,81,82,85,86,87,88,102,123,124,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,155,156,160,167,168,169,179,181,],[67,103,103,103,103,103,103,103,103,103,103,103,164,-92,-35,-36,-37,-38,-39,-40,-41,-42,-92,-43,-44,-92,-45,-46,-47,103,103,103,103,103,103,103,103,]),'ELSE':([46,72,187,],[-49,-48,190,]),'EQUALS':([55,62,89,161,191,],[75,-20,123,-19,-18,]),'PLUSEQUALS':([55,62,161,191,],[76,-20,-19,-18,]),'SUBSTRACTEQUALS':([55,62,161,191,],[77,-20,-19,-18,]),'INCREMENT':([55,62,161,191,],[78,-20,-19,-18,]),'DECREMENT':([55,62,161,191,],[79,-20,-19,-18,]),'MULTIPLY':([62,97,101,103,104,105,106,128,147,148,149,159,161,170,191,],[-20,-93,143,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-18,]),'DIVIDE':([62,97,101,103,104,105,106,128,147,148,149,159,161,170,191,],[-20,-93,144,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-18,]),'MOD':([62,97,101,103,104,105,106,128,147,148,149,159,161,170,191,],[-20,-93,145,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-18,]),'PLUS':([62,97,100,101,103,104,105,106,128,147,148,149,159,161,170,186,191,],[-20,-93,140,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-84,-18,]),'MINUS':([62,97,100,101,103,104,105,106,128,147,148,149,159,161,170,186,191,],[-20,-93,141,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-84,-18,]),'COMPARISON':([62,97,99,100,101,103,104,105,106,128,147,148,149,159,161,170,185,186,191,],[-20,-93,131,-83,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-82,-84,-18,]),'GREATERHANOREQUAL':([62,97,99,100,101,103,104,105,106,128,147,148,149,159,161,170,185,186,191,],[-20,-93,132,-83,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-82,-84,-18,]),'LESSTHANOREQUAL':([62,97,99,100,101,103,104,105,106,128,147,148,149,159,161,170,185,186,191,],[-20,-93,133,-83,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-82,-84,-18,]),'GREATERTHAN':([62,97,99,100,101,103,104,105,106,128,147,148,149,159,161,170,185,186,191,],[-20,-93,134,-83,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-82,-84,-18,]),'LESSTHAN':([62,97,99,100,101,103,104,105,106,128,147,148,149,159,161,170,185,186,191,],[-20,-93,135,-83,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-82,-84,-18,]),'DIFFERENT':([62,97,99,100,101,103,104,105,106,128,147,148,149,159,161,170,185,186,191,],[-20,-93,136,-83,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-82,-84,-18,]),'OR':([62,97,99,100,101,103,104,105,106,128,147,148,149,159,161,170,185,186,191,],[-20,-93,137,-83,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-82,-84,-18,]),'AND':([62,97,99,100,101,103,104,105,106,128,147,148,149,159,161,170,185,186,191,],[-20,-93,138,-83,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,-86,-82,-84,-18,]),'RIGHTSQRBRACKET':([62,67,97,99,100,101,103,104,105,106,121,128,147,148,149,159,161,164,170,184,185,186,188,191,],[-20,90,-93,-81,-83,-85,-94,-94,-94,-90,161,-91,-87,-88,-89,-77,-19,182,-86,-80,-82,-84,191,-18,]),'TO':([62,97,100,101,103,104,105,106,128,147,148,149,159,161,163,170,185,186,191,],[-20,-93,-83,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,181,-86,-82,-84,-18,]),'DO':([62,97,100,101,103,104,105,106,128,147,148,149,159,161,162,170,185,186,189,191,],[-20,-93,-83,-85,-94,-94,-94,-90,-91,-87,-88,-89,-77,-19,180,-86,-82,-84,192,-18,]),'CTEFLOAT':([75,76,77,81,82,85,86,87,88,102,123,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,155,156,160,167,168,169,179,181,],[104,104,104,104,104,104,104,104,104,104,104,-92,-35,-36,-37,-38,-39,-40,-41,-42,-92,-43,-44,-92,-45,-46,-47,104,104,104,104,104,104,104,104,]),'CTECHAR':([75,76,77,81,82,85,86,87,88,102,123,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,155,156,160,167,168,169,179,181,],[105,105,105,105,105,105,105,105,105,105,105,-92,-35,-36,-37,-38,-39,-40,-41,-42,-92,-43,-44,-92,-45,-46,-47,105,105,105,105,105,105,105,105,]),'CTESTRING':([81,155,156,],[115,115,115,]),'THEN':([157,],[176,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,68,],[5,91,]),'functions_list':([4,5,9,],[6,11,20,]),'function':([4,5,9,],[9,9,9,]),'neupoint_back_global':([6,11,],[13,24,]),'vars_lists':([8,38,],[15,65,]),'data_type':([8,10,38,69,166,],[16,22,16,95,95,]),'return_type':([10,],[21,]),'neupoint_add_vars':([15,],[28,]),'decla_ids_list':([16,39,],[29,66,]),'decla_identifier':([16,39,95,],[30,30,127,]),'block':([27,34,44,59,60,68,70,91,176,190,],[36,43,71,83,84,92,96,125,187,193,]),'neupoint_add_function':([32,],[41,]),'statutes_list':([37,47,],[45,73,]),'statute':([37,47,],[47,47,]),'asignation':([37,47,],[48,48,]),'reading':([37,47,],[49,49,]),'writing':([37,47,],[50,50,]),'decision':([37,47,],[51,51,]),'loop':([37,47,],[52,52,]),'function_return':([37,47,],[53,53,]),'function_call':([37,47,75,76,77,81,82,85,86,87,88,102,123,155,156,160,167,168,169,179,181,],[54,54,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'identifier':([37,47,75,76,77,80,81,82,85,86,87,88,102,123,153,155,156,160,167,168,169,179,181,],[55,55,97,97,97,112,97,97,97,97,97,97,97,97,112,97,97,97,97,97,97,97,97,]),'conditional':([37,47,],[59,59,]),'non_conditional':([37,47,],[60,60,]),'parameters_list':([41,],[68,]),'parameter':([69,166,],[93,183,]),'expresion':([75,76,77,81,82,86,87,88,102,155,156,160,179,],[98,107,108,116,117,120,121,122,146,116,116,120,188,]),'exp':([75,76,77,81,82,85,86,87,88,102,123,155,156,160,167,168,179,181,],[99,99,99,99,99,118,99,99,99,99,163,99,99,99,184,185,99,189,]),'term':([75,76,77,81,82,85,86,87,88,102,123,155,156,160,167,168,169,179,181,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,186,100,100,]),'factor':([75,76,77,81,82,85,86,87,88,102,123,155,156,160,167,168,169,179,181,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'ids_list':([80,153,],[111,172,]),'writing_list':([81,155,156,],[114,174,175,]),'expresion_list':([86,160,],[119,178,]),'neupoint_add_operand':([97,],[128,]),'comparators':([99,],[130,]),'exp_operator':([100,],[139,]),'term_operator':([101,],[142,]),'neupoint_add_cte_operand':([103,104,105,],[147,148,149,]),'neupoint_add_parameters':([126,],[165,]),'neupoint_add_operator':([130,139,142,],[167,168,169,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON vars functions_list neupoint_back_global MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block','program',10,'p_program','tokensAndGrammars.py',169),
  ('program -> PROGRAM ID SEMICOLON vars MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block','program',8,'p_program','tokensAndGrammars.py',170),
  ('program -> PROGRAM ID SEMICOLON functions_list neupoint_back_global MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block','program',9,'p_program','tokensAndGrammars.py',171),
  ('program -> PROGRAM ID SEMICOLON MAIN LEFTPARENTHESIS RIGHTPARENTHESIS block','program',7,'p_program','tokensAndGrammars.py',172),
  ('data_type -> INT','data_type',1,'p_data_type','tokensAndGrammars.py',179),
  ('data_type -> FLOAT','data_type',1,'p_data_type','tokensAndGrammars.py',180),
  ('data_type -> CHAR','data_type',1,'p_data_type','tokensAndGrammars.py',181),
  ('vars -> VAR vars_lists neupoint_add_vars','vars',3,'p_vars','tokensAndGrammars.py',188),
  ('vars_lists -> data_type decla_ids_list SEMICOLON vars_lists','vars_lists',4,'p_vars_lists','tokensAndGrammars.py',195),
  ('vars_lists -> data_type decla_ids_list SEMICOLON','vars_lists',3,'p_vars_lists','tokensAndGrammars.py',196),
  ('decla_ids_list -> decla_identifier COMMA decla_ids_list','decla_ids_list',3,'p_decla_ids_list','tokensAndGrammars.py',210),
  ('decla_ids_list -> decla_identifier','decla_ids_list',1,'p_decla_ids_list','tokensAndGrammars.py',211),
  ('decla_identifier -> ID LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET','decla_identifier',7,'p_decla_identifier','tokensAndGrammars.py',222),
  ('decla_identifier -> ID LEFTSQRBRACKET CTEINT RIGHTSQRBRACKET','decla_identifier',4,'p_decla_identifier','tokensAndGrammars.py',223),
  ('decla_identifier -> ID','decla_identifier',1,'p_decla_identifier','tokensAndGrammars.py',224),
  ('ids_list -> identifier COMMA ids_list','ids_list',3,'p_ids_list','tokensAndGrammars.py',237),
  ('ids_list -> identifier','ids_list',1,'p_ids_list','tokensAndGrammars.py',238),
  ('identifier -> ID LEFTSQRBRACKET expresion RIGHTSQRBRACKET LEFTSQRBRACKET expresion RIGHTSQRBRACKET','identifier',7,'p_identifier','tokensAndGrammars.py',245),
  ('identifier -> ID LEFTSQRBRACKET expresion RIGHTSQRBRACKET','identifier',4,'p_identifier','tokensAndGrammars.py',246),
  ('identifier -> ID','identifier',1,'p_identifier','tokensAndGrammars.py',247),
  ('neupoint_add_vars -> <empty>','neupoint_add_vars',0,'p_neupoint_add_vars','tokensAndGrammars.py',255),
  ('return_type -> data_type','return_type',1,'p_return_type','tokensAndGrammars.py',263),
  ('return_type -> VOID','return_type',1,'p_return_type','tokensAndGrammars.py',264),
  ('functions_list -> function functions_list','functions_list',2,'p_functions_list','tokensAndGrammars.py',271),
  ('functions_list -> function','functions_list',1,'p_functions_list','tokensAndGrammars.py',272),
  ('function -> MODULE return_type ID neupoint_add_function parameters_list vars block','function',7,'p_function','tokensAndGrammars.py',279),
  ('function -> MODULE return_type ID neupoint_add_function parameters_list block','function',6,'p_function','tokensAndGrammars.py',280),
  ('parameters_list -> LEFTPARENTHESIS parameter RIGHTPARENTHESIS neupoint_add_parameters','parameters_list',4,'p_parameters_list','tokensAndGrammars.py',299),
  ('parameters_list -> LEFTPARENTHESIS RIGHTPARENTHESIS','parameters_list',2,'p_parameters_list','tokensAndGrammars.py',300),
  ('parameter -> data_type decla_identifier COMMA parameter','parameter',4,'p_parameter','tokensAndGrammars.py',306),
  ('parameter -> data_type decla_identifier','parameter',2,'p_parameter','tokensAndGrammars.py',307),
  ('neupoint_add_function -> <empty>','neupoint_add_function',0,'p_neupoint_add_function','tokensAndGrammars.py',332),
  ('neupoint_add_parameters -> <empty>','neupoint_add_parameters',0,'p_neupoint_add_parameters','tokensAndGrammars.py',340),
  ('neupoint_back_global -> <empty>','neupoint_back_global',0,'p_neupoint_back_global','tokensAndGrammars.py',347),
  ('comparators -> COMPARISON','comparators',1,'p_comparators','tokensAndGrammars.py',355),
  ('comparators -> GREATERHANOREQUAL','comparators',1,'p_comparators','tokensAndGrammars.py',356),
  ('comparators -> LESSTHANOREQUAL','comparators',1,'p_comparators','tokensAndGrammars.py',357),
  ('comparators -> GREATERTHAN','comparators',1,'p_comparators','tokensAndGrammars.py',358),
  ('comparators -> LESSTHAN','comparators',1,'p_comparators','tokensAndGrammars.py',359),
  ('comparators -> DIFFERENT','comparators',1,'p_comparators','tokensAndGrammars.py',360),
  ('comparators -> OR','comparators',1,'p_comparators','tokensAndGrammars.py',361),
  ('comparators -> AND','comparators',1,'p_comparators','tokensAndGrammars.py',362),
  ('exp_operator -> PLUS','exp_operator',1,'p_exp_operator','tokensAndGrammars.py',369),
  ('exp_operator -> MINUS','exp_operator',1,'p_exp_operator','tokensAndGrammars.py',370),
  ('term_operator -> MULTIPLY','term_operator',1,'p_term_operator','tokensAndGrammars.py',377),
  ('term_operator -> DIVIDE','term_operator',1,'p_term_operator','tokensAndGrammars.py',378),
  ('term_operator -> MOD','term_operator',1,'p_term_operator','tokensAndGrammars.py',379),
  ('block -> LEFTBRACKET statutes_list RIGHTBRACKET','block',3,'p_block','tokensAndGrammars.py',387),
  ('block -> LEFTBRACKET RIGHTBRACKET','block',2,'p_block','tokensAndGrammars.py',388),
  ('statutes_list -> statute statutes_list','statutes_list',2,'p_statutes_list','tokensAndGrammars.py',395),
  ('statutes_list -> statute','statutes_list',1,'p_statutes_list','tokensAndGrammars.py',396),
  ('statute -> asignation','statute',1,'p_statute','tokensAndGrammars.py',403),
  ('statute -> reading','statute',1,'p_statute','tokensAndGrammars.py',404),
  ('statute -> writing','statute',1,'p_statute','tokensAndGrammars.py',405),
  ('statute -> decision','statute',1,'p_statute','tokensAndGrammars.py',406),
  ('statute -> loop','statute',1,'p_statute','tokensAndGrammars.py',407),
  ('statute -> function_return','statute',1,'p_statute','tokensAndGrammars.py',408),
  ('statute -> function_call SEMICOLON','statute',2,'p_statute','tokensAndGrammars.py',409),
  ('asignation -> identifier EQUALS expresion SEMICOLON','asignation',4,'p_asignation','tokensAndGrammars.py',416),
  ('asignation -> identifier PLUSEQUALS expresion SEMICOLON','asignation',4,'p_asignation','tokensAndGrammars.py',417),
  ('asignation -> identifier SUBSTRACTEQUALS expresion SEMICOLON','asignation',4,'p_asignation','tokensAndGrammars.py',418),
  ('asignation -> identifier INCREMENT SEMICOLON','asignation',3,'p_asignation','tokensAndGrammars.py',419),
  ('asignation -> identifier DECREMENT SEMICOLON','asignation',3,'p_asignation','tokensAndGrammars.py',420),
  ('reading -> READ LEFTPARENTHESIS ids_list RIGHTPARENTHESIS SEMICOLON','reading',5,'p_reading','tokensAndGrammars.py',427),
  ('writing -> WRITE LEFTPARENTHESIS writing_list RIGHTPARENTHESIS SEMICOLON','writing',5,'p_writing','tokensAndGrammars.py',434),
  ('writing_list -> CTESTRING COMMA writing_list','writing_list',3,'p_writing_list','tokensAndGrammars.py',441),
  ('writing_list -> expresion COMMA writing_list','writing_list',3,'p_writing_list','tokensAndGrammars.py',442),
  ('writing_list -> CTESTRING','writing_list',1,'p_writing_list','tokensAndGrammars.py',443),
  ('writing_list -> expresion','writing_list',1,'p_writing_list','tokensAndGrammars.py',444),
  ('decision -> IF LEFTPARENTHESIS expresion RIGHTPARENTHESIS THEN block ELSE block','decision',8,'p_decision','tokensAndGrammars.py',451),
  ('decision -> IF LEFTPARENTHESIS expresion RIGHTPARENTHESIS THEN block','decision',6,'p_decision','tokensAndGrammars.py',452),
  ('loop -> conditional block','loop',2,'p_loop','tokensAndGrammars.py',459),
  ('loop -> non_conditional block','loop',2,'p_loop','tokensAndGrammars.py',460),
  ('conditional -> WHILE LEFTPARENTHESIS expresion RIGHTPARENTHESIS DO','conditional',5,'p_conditional','tokensAndGrammars.py',467),
  ('non_conditional -> FOR ID EQUALS exp TO exp DO','non_conditional',7,'p_non_conditional','tokensAndGrammars.py',474),
  ('function_return -> RETURN LEFTPARENTHESIS exp RIGHTPARENTHESIS SEMICOLON','function_return',5,'p_function_return','tokensAndGrammars.py',481),
  ('function_call -> ID LEFTPARENTHESIS expresion_list RIGHTPARENTHESIS','function_call',4,'p_function_call','tokensAndGrammars.py',489),
  ('expresion_list -> expresion COMMA expresion_list','expresion_list',3,'p_expresion_list','tokensAndGrammars.py',496),
  ('expresion_list -> expresion','expresion_list',1,'p_expresion_list','tokensAndGrammars.py',497),
  ('expresion -> exp comparators neupoint_add_operator exp','expresion',4,'p_expresion','tokensAndGrammars.py',504),
  ('expresion -> exp','expresion',1,'p_expresion','tokensAndGrammars.py',505),
  ('exp -> term exp_operator neupoint_add_operator exp','exp',4,'p_exp','tokensAndGrammars.py',512),
  ('exp -> term','exp',1,'p_exp','tokensAndGrammars.py',513),
  ('term -> factor term_operator neupoint_add_operator term','term',4,'p_term','tokensAndGrammars.py',520),
  ('term -> factor','term',1,'p_term','tokensAndGrammars.py',521),
  ('factor -> LEFTPARENTHESIS expresion RIGHTPARENTHESIS','factor',3,'p_factor','tokensAndGrammars.py',528),
  ('factor -> CTEINT neupoint_add_cte_operand','factor',2,'p_factor','tokensAndGrammars.py',529),
  ('factor -> CTEFLOAT neupoint_add_cte_operand','factor',2,'p_factor','tokensAndGrammars.py',530),
  ('factor -> CTECHAR neupoint_add_cte_operand','factor',2,'p_factor','tokensAndGrammars.py',531),
  ('factor -> function_call','factor',1,'p_factor','tokensAndGrammars.py',532),
  ('factor -> identifier neupoint_add_operand','factor',2,'p_factor','tokensAndGrammars.py',533),
  ('neupoint_add_operator -> <empty>','neupoint_add_operator',0,'p_neupoint_add_operator','tokensAndGrammars.py',540),
  ('neupoint_add_operand -> <empty>','neupoint_add_operand',0,'p_neupoint_add_operand','tokensAndGrammars.py',547),
  ('neupoint_add_cte_operand -> <empty>','neupoint_add_cte_operand',0,'p_neupoint_add_cte_operand','tokensAndGrammars.py',560),
]
